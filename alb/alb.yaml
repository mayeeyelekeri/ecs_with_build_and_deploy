# File: alb.yaml 
# This module creates all the "Load Balancer" related resources 
#
# Before executing this, make sure "init.sh" is called which would create all "Parameter Store" values 
# Also make sure the "network" and "permissions" modules are already created 
# 
# Resource that would be created
# 1) Listener on port 80 
# 2) Target Group based on the application port (mostly 80)  
# 3) Application Load Balancer 

Description: "Create Application Load Balancer"

#  "network" and "permission" modules should have been created already 
Parameters: 
  networkStackName:
    Description: Name of the base stack with all network resources
    Type: String
    Default: nw

  permStackName:
    Description: Name of the base stack with all network resources
    Type: String
    Default: perm

  environment: 
    Type: String 
    Default: dev 
    AllowedValues: 
      - dev
      - prod 

  albName:
    Description: albForECS
    Type: String
    MinLength: 1
    MaxLength: 255
    Default: albForECS
    
Resources:
  
  # Create a target group for application port
  # This will only create the target group, EC2 instances are attached from the autoscaling group 
  # Inputs: 
  # 1) application Port from Parameter store 
  # 2) VPC ID (from network stack)
  #    
  targetGroup1:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: my-target-group1
      Protocol: HTTP
      Port: 80
      VpcId: 
        Fn::ImportValue: 
         Fn::Sub: "${networkStackName}-VPCID"
      TargetType: ip 
      Tags:
        - Key: Name
          Value: !Join [" - ", [Fn::Sub: "${AWS::StackName}", "TargetGroup"]]
        - Key: Environment
          Value: !Sub ${environment}

  # Create a target group for application port
  # This will only create the target group, EC2 instances are attached from the autoscaling group 
  # Inputs: 
  # 1) application Port from Parameter store 
  # 2) VPC ID (from network stack)
  # 3) Port 8080   
  targetGroup2:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: my-target-group2
      Protocol: HTTP
      Port: 8080
      VpcId: 
        Fn::ImportValue: 
          Fn::Sub: "${networkStackName}-VPCID"
      TargetType: ip 
    Tags:
      - Key: Name
        Value: !Join [" - ", [Fn::Sub: "${AWS::StackName}", "TargetGroup"]]
      - Key: Environment
        Value: !Sub ${environment}
  # Create application load balancer and attach the target group 
  # No need to attach any "targets" at this point, it will be done by ECS service 
  # Inputs: 
  # 1) Security Group (from permissions stack) 
  # 2) Public subnet 1 (from network stack)
  # 3) Public subnet 2 (from network stack)
  #    
  alb:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub ${albName}
      SecurityGroups: 
        - Fn::ImportValue: 
           Fn::Sub: "${permStackName}-PUBLIC-SG"
      Subnets: 
        - Fn::ImportValue: 
           Fn::Sub: "${networkStackName}-PUBLIC-SUBNET1"
        - Fn::ImportValue: 
           Fn::Sub: "${networkStackName}-PUBLIC-SUBNET2"
    Tags:
    - Key: Name
         Value: !Join [" - ", [Fn::Sub: "${AWS::StackName}", "alb"] ]
    - Key: Environment
         Value: !Sub ${environment}	

  # Create a listener on port "80"
  listener1:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref alb
      Port: 80
      Protocol: HTTP
      DefaultActions: 
      - Type: "forward" 
        TargetGroupArn: !Ref targetGroup1
               
  # Create a listener on port "80"
  listener2:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref alb
      Port: 8080
      Protocol: HTTP
      DefaultActions: 
      - Type: "forward" 
        TargetGroupArn: !Ref targetGroup2

# Export the following 2 values 
# 1) alb : alb-ALB 
# 2) target group - alb-TARGET_GROUP  (This will be using in ECS Service resource)
#
Outputs:
  LoadBalancer:
    Value: !Ref alb
    Export:
      "Name" :
        Fn::Sub: "${AWS::StackName}-ALB"
  
  TargetGroup1:
    Value: !Ref targetGroup1
    Export:
      "Name" :
        Fn::Sub: "${AWS::StackName}-TARGET-GROUP1"
                      
  TargetGroup2:
    Value: !Ref targetGroup2
    Export:
      "Name" :
        Fn::Sub: "${AWS::StackName}-TARGET-GROUP2"


