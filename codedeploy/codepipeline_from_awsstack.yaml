Parameters:
  RepositoryName:
    Description: The repository name to use with your ecr action.
    Type: String
  ImageTag:
    Description: The image tag to use when building and deploying your Docker image.
    Type: String
  CodePipelineName:
    Description: The CodePipeline pipeline name that will build and deploy your Docker image from source code.
    Type: String
    Default: DeployToEcsFargateService
  ContainerPort:
    Description: The port the service is using inside of the container.
    Type: String
    Default: '8080'
  RetentionPolicy:
    Description: Define if you'd like the resource retained or deleted when the
      CloudFormation stack is deleted.
    Type: String
    Default: Delete
    AllowedValues:
      - Delete
      - Retain
Resources:
  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
        Version: '2012-10-17'
  CodeBuildRoleDefaultPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource:
              - !Join
                - ''
                - - !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/
                  - !Ref CodeBuildProject
                  - ':*'
              - !Join
                - ''
                - - !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/
                  - !Ref CodeBuildProject
          - Action:
              - codebuild:BatchPutCodeCoverages
              - codebuild:BatchPutTestCases
              - codebuild:CreateReport
              - codebuild:CreateReportGroup
              - codebuild:UpdateReport
            Effect: Allow
            Resource: !Join
              - ''
              - - !Sub arn:${AWS::Partition}:codebuild:${AWS::Region}:${AWS::AccountId}:report-group/
                - !Ref CodeBuildProject
                - '-*'
          - Action:
              - s3:Abort*
              - s3:DeleteObject*
              - s3:GetBucket*
              - s3:GetObject*
              - s3:List*
              - s3:PutObject
              - s3:PutObjectLegalHold
              - s3:PutObjectRetention
              - s3:PutObjectTagging
              - s3:PutObjectVersionTagging
            Effect: Allow
            Resource:
              - !GetAtt CodePipelineArtifactsBucket.Arn
              - !Join
                - '/'
                - - !GetAtt CodePipelineArtifactsBucket.Arn
                  - '*'
        Version: '2012-10-17'
      PolicyName: CodeBuildRoleDefaultPolicy
      Roles:
        - !Ref CodeBuildRole
  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: NO_ARTIFACTS
      Cache:
        Type: NO_CACHE
      Description: Create an imagedefinitions.json for ECS Deploy action
      EncryptionKey: alias/aws/s3
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-x86_64-standard:5.0
        ImagePullCredentialsType: CODEBUILD
        PrivilegedMode: false
        Type: LINUX_CONTAINER
      Name:
        Fn::Join:
          - '-'
          - - DeployToEcsFargateProject
            - Fn::Select:
                - 4
                - Fn::Split:
                    - '-'
                    - Fn::Select:
                        - 2
                        - Fn::Split:
                            - /
                            - Ref: AWS::StackId
      ServiceRole: !GetAtt CodeBuildRole.Arn
      Source:
        BuildSpec: !Sub |
          version: "0.2"
          phases:
            build:
              commands:
                - echo '[{"name":"${RepositoryName}","imageUri":"${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${RepositoryName}:${ImageTag}"}]' > imagedefinitions.json
          artifacts:
            files:
              - imagedefinitions.json
        Type: NO_SOURCE
  Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName:
        Fn::Join:
          - '-'
          - - SimpleDockerEcsCluster
            - Fn::Select:
                - 4
                - Fn::Split:
                    - '-'
                    - Fn::Select:
                        - 2
                        - Fn::Split:
                            - /
                            - Ref: AWS::StackId
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Sub
            - ${AWS::StackName}/${clusterName}/Vpc
            - clusterName:
                Fn::Join:
                  - '-'
                  - - SimpleDockerEcsCluster
                    - Fn::Select:
                        - 4
                        - Fn::Split:
                            - '-'
                            - Fn::Select:
                                - 2
                                - Fn::Split:
                                    - /
                                    - Ref: AWS::StackId
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Sub ${AWS::Region}a
      CidrBlock: 10.0.0.0/18
      MapPublicIpOnLaunch: true
      Tags:
        - Key: aws-cdk:subnet-name
          Value: Public
        - Key: aws-cdk:subnet-type
          Value: Public
        - Key: Name
          Value: !Sub
            - ${AWS::StackName}/${clusterName}/Vpc/PublicSubnet1
            - clusterName:
                Fn::Join:
                  - '-'
                  - - SimpleDockerEcsCluster
                    - Fn::Select:
                        - 4
                        - Fn::Split:
                            - '-'
                            - Fn::Select:
                                - 2
                                - Fn::Split:
                                    - /
                                    - Ref: AWS::StackId
      VpcId: !Ref Vpc
  PublicSubnet1RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: !Sub
            - ${AWS::StackName}/${clusterName}/Vpc/PublicSubnet1
            - clusterName:
                Fn::Join:
                  - '-'
                  - - SimpleDockerEcsCluster
                    - Fn::Select:
                        - 4
                        - Fn::Split:
                            - '-'
                            - Fn::Select:
                                - 2
                                - Fn::Split:
                                    - /
                                    - Ref: AWS::StackId
      VpcId: !Ref Vpc
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicSubnet1RouteTable
      SubnetId: !Ref PublicSubnet1
  PublicSubnet1DefaultRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref VpcIGW
      RouteTableId: !Ref PublicSubnet1RouteTable
    DependsOn:
      - VpcGatewayAttachment
  PublicSubnet1EIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub
            - ${AWS::StackName}/${clusterName}/Vpc/PublicSubnet1
            - clusterName:
                Fn::Join:
                  - '-'
                  - - SimpleDockerEcsCluster
                    - Fn::Select:
                        - 4
                        - Fn::Split:
                            - '-'
                            - Fn::Select:
                                - 2
                                - Fn::Split:
                                    - /
                                    - Ref: AWS::StackId
  PublicSubnet1NATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt PublicSubnet1EIP.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: !Sub
            - ${AWS::StackName}/${clusterName}/Vpc/PublicSubnet1
            - clusterName:
                Fn::Join:
                  - '-'
                  - - SimpleDockerEcsCluster
                    - Fn::Select:
                        - 4
                        - Fn::Split:
                            - '-'
                            - Fn::Select:
                                - 2
                                - Fn::Split:
                                    - /
                                    - Ref: AWS::StackId
    DependsOn:
      - PublicSubnet1DefaultRoute
      - PublicSubnet1RouteTableAssociation
  VpcIGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub
            - ${AWS::StackName}/${clusterName}/Vpc
            - clusterName:
                Fn::Join:
                  - '-'
                  - - SimpleDockerEcsCluster
                    - Fn::Select:
                        - 4
                        - Fn::Split:
                            - '-'
                            - Fn::Select:
                                - 2
                                - Fn::Split:
                                    - /
                                    - Ref: AWS::StackId
  VpcGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref VpcIGW
      VpcId: !Ref Vpc
  TaskDefinitionTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: '2012-10-17'
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Essential: true
          Image: !Join
            - ''
            - - !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.
              - !Ref AWS::URLSuffix
              - !Sub /${RepositoryName}:${ImageTag}
          Name: DeployToEcsFargateContainerName
          PortMappings:
            - ContainerPort: !Ref ContainerPort
              Protocol: tcp
      Cpu: '256'
      ExecutionRoleArn: !GetAtt TaskDefinitionExecutionRole.Arn
      Family: DeployToEcsFargateTaskDefinitionFamily
      Memory: '512'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      RuntimePlatform:
        CpuArchitecture: X86_64
        OperatingSystemFamily: LINUX
      TaskRoleArn: !GetAtt TaskDefinitionTaskRole.Arn
  TaskDefinitionExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: '2012-10-17'
  TaskDefinitionExecutionRoleDefaultPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - ecr:BatchCheckLayerAvailability
              - ecr:BatchGetImage
              - ecr:GetDownloadUrlForLayer
            Effect: Allow
            Resource: !Sub arn:${AWS::Partition}:ecr:${AWS::Region}:${AWS::AccountId}:repository/${RepositoryName}
          - Action: ecr:GetAuthorizationToken
            Effect: Allow
            Resource: '*'
        Version: '2012-10-17'
      PolicyName: TaskDefinitionExecutionRoleDefaultPolicy
      Roles:
        - !Ref TaskDefinitionExecutionRole
  Service:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref Cluster
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      EnableECSManagedTags: false
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !GetAtt ServiceSecurityGroup.GroupId
          Subnets:
            - !Ref PublicSubnet1
      ServiceName:
        Fn::Join:
          - '-'
          - - SimpleDockerEcsService
            - Fn::Select:
                - 4
                - Fn::Split:
                    - '-'
                    - Fn::Select:
                        - 2
                        - Fn::Split:
                            - /
                            - Ref: AWS::StackId
      TaskDefinition: !Ref TaskDefinition
    DependsOn:
      - TaskDefinitionTaskRole
  ServiceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub
                        - ${clusterName}/${serviceName}/SecurityGroup
                        - clusterName:
                            Fn::Join:
                              - '-'
                              - - SimpleDockerEcsCluster
                                - Fn::Select:
                                    - 4
                                    - Fn::Split:
                                        - '-'
                                        - Fn::Select:
                                            - 2
                                            - Fn::Split:
                                                - /
                                                - Ref: AWS::StackId
                          serviceName:
                            Fn::Join:
                              - '-'
                              - - SimpleDockerEcsService
                                - Fn::Select:
                                    - 4
                                    - Fn::Split:
                                        - '-'
                                        - Fn::Select:
                                            - 2
                                            - Fn::Split:
                                                - /
                                                - Ref: AWS::StackId

      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: '-1'
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          Description: !Sub Incoming Web Server connection on port ${ContainerPort}.
          FromPort: !Ref ContainerPort
          IpProtocol: tcp
          ToPort: !Ref ContainerPort
      VpcId: !Ref Vpc
    DependsOn:
      - TaskDefinitionTaskRole
  CodePipelineArtifactsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: aws:kms
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
    UpdateReplacePolicy: !Ref RetentionPolicy
    DeletionPolicy: !Ref RetentionPolicy
  CodePipelineArtifactsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref CodePipelineArtifactsBucket
      PolicyDocument:
        Statement:
          - Action: s3:*
            Condition:
              Bool:
                aws:SecureTransport: 'false'
            Effect: Deny
            Principal:
              AWS: '*'
            Resource:
              - !GetAtt CodePipelineArtifactsBucket.Arn
              - !Join
                - ''
                - - !GetAtt CodePipelineArtifactsBucket.Arn
                  - /*
        Version: '2012-10-17'
  CodePipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
        Version: '2012-10-17'
  CodePipelineRoleDefaultPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - s3:Abort*
              - s3:DeleteObject*
              - s3:GetBucket*
              - s3:GetObject*
              - s3:List*
              - s3:PutObject
              - s3:PutObjectLegalHold
              - s3:PutObjectRetention
              - s3:PutObjectTagging
              - s3:PutObjectVersionTagging
            Effect: Allow
            Resource:
              - !GetAtt CodePipelineArtifactsBucket.Arn
              - !Join
                - ''
                - - !GetAtt CodePipelineArtifactsBucket.Arn
                  - /*
          - Action: sts:AssumeRole
            Effect: Allow
            Resource:
              - !GetAtt CodePipelineBuildActionRole.Arn
              - !GetAtt CodePipelineDeployActionRole.Arn
              - !GetAtt CodePipelineSourceActionRole.Arn
        Version: '2012-10-17'
      PolicyName: CodePipelineRoleDefaultPolicy
      Roles:
        - !Ref CodePipelineRole
  CodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      ArtifactStore:
        Location: !Ref CodePipelineArtifactsBucket
        Type: S3
      ExecutionMode: QUEUED
      Name: !Ref CodePipelineName
      PipelineType: V2
      RoleArn: !GetAtt CodePipelineRole.Arn
      Stages:
        - Actions:
            - ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: ECR
                Version: '1'
              Configuration:
                RepositoryName: !Ref RepositoryName
              Name: !Sub ${RepositoryName}-${ImageTag}
              OutputArtifacts:
                - Name: SourceOutput
              RoleArn: !GetAtt CodePipelineSourceActionRole.Arn
              RunOrder: 1
          Name: Source
          OnFailure:
            Result: RETRY
        - Actions:
            - ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: '1'
              Configuration:
                ProjectName: !Ref CodeBuildProject
              InputArtifacts:
                - Name: SourceOutput
              Name: Build
              OutputArtifacts:
                - Name: BuildOutput
              RoleArn: !GetAtt CodePipelineBuildActionRole.Arn
              RunOrder: 1
          Name: Build
          BeforeEntry:
            Conditions:
              - Result: FAIL
                Rules:
                  - Name: MyBuildDeploymentWindowRule
                    RuleTypeId:
                      Category: Rule
                      Owner: AWS
                      Provider: DeploymentWindow
                      Version: '1'
                    Configuration:
                      Cron: '* * * * * ? *'
                      TimeZone: 'PST'
        - Actions:
            - ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: ECS
                Version: '1'
              Configuration:
                ClusterName: !Ref Cluster
                ServiceName: !GetAtt Service.Name
                FileName: imagedefinitions.json
              InputArtifacts:
                - Name: BuildOutput
              Name: Deploy
              RoleArn: !GetAtt CodePipelineDeployActionRole.Arn
              RunOrder: 1
          Name: Deploy
          OnFailure:
            Result: ROLLBACK
          BeforeEntry:
            Conditions:
              - Result: FAIL
                Rules:
                  - Name: MyDeployDeploymentWindowRule
                    RuleTypeId:
                      Category: Rule
                      Owner: AWS
                      Provider: DeploymentWindow
                      Version: '1'
                    Configuration:
                      Cron: '* * * * * ? *'
                      TimeZone: 'PST'
    DependsOn:
      - CodePipelineRoleDefaultPolicy
  CodePipelineSourceActionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              AWS: !Sub arn:${AWS::Partition}:iam::${AWS::AccountId}:root
        Version: '2012-10-17'
  CodePipelineSourceActionRoleDefaultPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: ecr:DescribeImages
            Effect: Allow
            Resource: !Sub arn:${AWS::Partition}:ecr:${AWS::Region}:${AWS::AccountId}:repository/${RepositoryName}
          - Action:
              - s3:Abort*
              - s3:DeleteObject*
              - s3:PutObject
              - s3:PutObjectLegalHold
              - s3:PutObjectRetention
              - s3:PutObjectTagging
              - s3:PutObjectVersionTagging
            Effect: Allow
            Resource:
              - !GetAtt CodePipelineArtifactsBucket.Arn
              - !Join
                - ''
                - - !GetAtt CodePipelineArtifactsBucket.Arn
                  - /*
        Version: '2012-10-17'
      PolicyName: CodePipelineSourceActionRoleDefaultPolicy
      Roles:
        - !Ref CodePipelineSourceActionRole
  CodePipelineSourceEventRule:
    Type: AWS::Events::Rule
    Properties:
      EventPattern:
        detail-type:
          - ECR Image Action
        source:
          - aws.ecr
        detail:
          result:
            - SUCCESS
          repository-name:
            - !Ref RepositoryName
          image-tag:
            - !Ref ImageTag
          action-type:
            - PUSH
      State: ENABLED
      Targets:
        - Arn: !Join
            - ''
            - - !Sub 'arn:${AWS::Partition}:codepipeline:${AWS::Region}:${AWS::AccountId}:'
              - !Ref CodePipeline
          Id: Target0
          RoleArn: !GetAtt SourceEventsRole.Arn
  SourceEventsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: events.amazonaws.com
        Version: '2012-10-17'
  SourceEventsRoleDefaultPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: codepipeline:StartPipelineExecution
            Effect: Allow
            Resource: !Join
              - ''
              - - !Sub 'arn:${AWS::Partition}:codepipeline:${AWS::Region}:${AWS::AccountId}:'
                - !Ref CodePipeline
        Version: '2012-10-17'
      PolicyName: SourceEventsRoleDefaultPolicy
      Roles:
        - !Ref SourceEventsRole
  CodePipelineBuildActionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              AWS: !Sub arn:${AWS::Partition}:iam::${AWS::AccountId}:root
        Version: '2012-10-17'
  CodePipelineBuildActionRoleDefaultPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - codebuild:BatchGetBuilds
              - codebuild:StartBuild
              - codebuild:StopBuild
            Effect: Allow
            Resource: !GetAtt CodeBuildProject.Arn
        Version: '2012-10-17'
      PolicyName: CodePipelineBuildActionRoleDefaultPolicy
      Roles:
        - !Ref CodePipelineBuildActionRole
  CodePipelineDeployActionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              AWS: !Sub arn:${AWS::Partition}:iam::${AWS::AccountId}:root
        Version: '2012-10-17'
  CodePipelineDeployActionRoleDefaultPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - ecs:DescribeServices
              - ecs:DescribeTaskDefinition
              - ecs:DescribeTasks
              - ecs:ListTasks
              - ecs:RegisterTaskDefinition
              - ecs:TagResource
              - ecs:UpdateService
            Effect: Allow
            Resource: '*'
          - Action: iam:PassRole
            Condition:
              StringEqualsIfExists:
                iam:PassedToService:
                  - ec2.amazonaws.com
                  - ecs-tasks.amazonaws.com
            Effect: Allow
            Resource: '*'
          - Action:
              - s3:GetBucket*
              - s3:GetObject*
              - s3:List*
            Effect: Allow
            Resource:
              - !GetAtt CodePipelineArtifactsBucket.Arn
              - !Join
                - ''
                - - !GetAtt CodePipelineArtifactsBucket.Arn
                  - /*
          - Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource:
              - !Sub
                - arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codepipeline/${pipelineName}
                - pipelineName: !Ref CodePipelineName
              - !Sub
                - arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codepipeline/${pipelineName}:*
                - pipelineName: !Ref CodePipelineName
        Version: '2012-10-17'
      PolicyName: CodePipelineDeployActionRoleDefaultPolicy
      Roles:
        - !Ref CodePipelineDeployActionRole
